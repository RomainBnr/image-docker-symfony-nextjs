# Docker Compose pour la PRODUCTION
services:
  # Base de données - PAS d'exposition de port en production
  mysql:
    image: mysql:8.4
    container_name: mysql_prod
    restart: unless-stopped
    # Ports supprimés pour la sécurité
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 10s
      retries: 5
      interval: 30s
      start_period: 30s
    command: --innodb-buffer-pool-size=1G --max-connections=200 --innodb-log-file-size=256M

  # PHP-FPM optimisé pour production
  php:
    build:
      context: .
      dockerfile: docker/php/Dockerfile.optimized
      target: production  # Target production au lieu de development
    container_name: symfony_php_prod
    restart: unless-stopped
    volumes:
      - ./backend:/var/www/html:ro  # Read-only en production
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      APP_ENV: prod
      APP_SECRET: ${APP_SECRET}
      APP_DEBUG: "0"  # Pas de debug en production
    networks:
      - app-network
    working_dir: /var/www/html
    healthcheck:
      test: ["CMD-SHELL", "pgrep php-fpm || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Frontend Next.js optimisé pour production
  frontend:
    build:
      context: .
      dockerfile: docker/nextjs/Dockerfile.optimized
      target: runner
    container_name: nextjs_prod
    restart: unless-stopped
    # Port interne seulement - accès via nginx
    environment:
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
      API_URL: http://nginx
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx avec HTTPS
  nginx:
    image: nginx:alpine
    container_name: nginx_prod
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf:ro
      - ./backend:/var/www/html:ro
      - nginx_cache_prod:/var/cache/nginx
      # SSL certificates (à configurer)
      - ${SSL_CERT_PATH}:/etc/ssl/certs/server.crt:ro
      - ${SSL_KEY_PATH}:/etc/ssl/private/server.key:ro
    depends_on:
      php:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis pour cache et sessions
  redis:
    image: redis:7-alpine
    container_name: redis_prod
    restart: unless-stopped
    # Port interne seulement
    volumes:
      - redis_data_prod:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

volumes:
  mysql_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  nginx_cache_prod:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16  # Subnet différent pour prod
